{"version":3,"sources":["scripts/main.js"],"names":["gameScore","document","querySelector","gameField","startButton","loseMessage","winMessage","startMessage","gameBoard","rows","cells","score","moveScore","getRandomTileValue","Math","round","random","getRandomIndex","floor","hasAdjacentTiles","hasAdjacent","r","c","isLoser","hasEmptyTile","classList","remove","removeEventListener","keyHandler","isWinner","some","row","cell","resetBoard","forEach","fill","appendTile","rowIndex","cellIndex","updateTile","tile","cellValue","innerHTML","className","add","updateScore","renderBoard","move","noZerosRow","filter","mergedRow","mergedValue","i","length","push","moveLeft","newRow","moveRight","reverse","moveUp","columnIndex","newColumn","moveDown","keyEvent","code","addEventListener","buttonEvent","target"],"mappings":"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","file":"main.86990ebb.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gameScore = document.querySelector('.game-score');\nconst gameField = document.querySelector('.game-field');\nconst startButton = document.querySelector('.button');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\n\nconst gameBoard = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst rows = 4;\nconst cells = 4;\nlet score = 0;\nlet moveScore = 0;\n\nfunction getRandomTileValue() {\n  return Math.round(Math.random()) < 0.9 ? 2 : 4;\n}\n\nfunction getRandomIndex() {\n  return Math.floor(Math.random() * 4);\n}\n\nfunction hasAdjacentTiles() {\n  let hasAdjacent = false;\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cells; c++) {\n      if (c < cells - 1 && gameBoard[r][c] === gameBoard[r][c + 1]) {\n        hasAdjacent = true;\n      } else if (r < rows - 1 && gameBoard[r][c] === gameBoard[r + 1][c]) {\n        hasAdjacent = true;\n      }\n    }\n  }\n\n  return hasAdjacent;\n};\n\nfunction isLoser() {\n  if (!hasEmptyTile() && !hasAdjacentTiles()) {\n    loseMessage.classList.remove('hidden');\n    document.removeEventListener('keyup', keyHandler);\n  }\n}\n\nfunction isWinner() {\n  if (gameBoard.some(row => row.some(cell => cell === 2048))) {\n    winMessage.classList.remove('hidden');\n    document.removeEventListener('keyup', keyHandler);\n  }\n}\n\nfunction resetBoard() {\n  gameBoard.forEach(row => row.fill(0));\n}\n\nstartButton.addEventListener('click', (buttonEvent) => {\n  resetBoard();\n  score = 0;\n\n  startMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  startButton.classList.remove('start');\n  buttonEvent.target.classList.add('restart');\n  startButton.innerHTML = 'Restart';\n\n  document.addEventListener('keyup', keyHandler);\n\n  appendTile();\n  appendTile();\n\n  renderBoard();\n});\n\nfunction hasEmptyTile() {\n  return gameBoard.some(row => row.some(cell => cell === 0));\n}\n\nfunction appendTile() {\n  if (hasEmptyTile()) {\n    let rowIndex, cellIndex;\n\n    do {\n      rowIndex = getRandomIndex();\n      cellIndex = getRandomIndex();\n    } while (gameBoard[rowIndex][cellIndex] !== 0);\n\n    gameBoard[rowIndex][cellIndex] = getRandomTileValue();\n  } else {\n    return null;\n  }\n}\n\nfunction updateTile(tile, cellValue) {\n  tile.innerHTML = '';\n  tile.className = '';\n  tile.classList.add('field-cell');\n\n  if (cellValue > 0) {\n    tile.classList.add(`field-cell--${cellValue}`);\n    tile.innerHTML = cellValue;\n    moveScore += cellValue;\n  }\n\n  updateScore();\n};\n\nfunction updateScore() {\n  gameScore.innerHTML = score;\n}\n\nfunction renderBoard() {\n  for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n    for (let cellIndex = 0; cellIndex < cells; cellIndex++) {\n      const tile = gameField.rows[rowIndex].cells[cellIndex];\n      const cellValue = gameBoard[rowIndex][cellIndex];\n\n      updateTile(tile, cellValue);\n    }\n  }\n}\n\nfunction move(row) {\n  const noZerosRow = row.filter(cell => cell !== 0);\n  const mergedRow = [];\n  let mergedValue = 0;\n\n  for (let i = 0; i < noZerosRow.length; i++) {\n    if (noZerosRow[i] === noZerosRow[i + 1]) {\n      mergedRow.push(noZerosRow[i] * 2);\n      mergedValue += noZerosRow[i] * 2;\n      i++;\n    } else {\n      mergedRow.push(noZerosRow[i]);\n    }\n  }\n\n  while (mergedRow.length < cells) {\n    mergedRow.push(0);\n  }\n\n  score += mergedValue;\n\n  return mergedRow;\n}\n\nfunction moveLeft() {\n  isWinner();\n  isLoser();\n  moveScore = 0;\n\n  for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n    const newRow = gameBoard[rowIndex];\n\n    gameBoard[rowIndex] = move(newRow);\n  }\n\n  appendTile();\n  score += moveScore;\n\n  updateScore();\n  renderBoard();\n}\n\nfunction moveRight() {\n  isWinner();\n  isLoser();\n  moveScore = 0;\n\n  for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n    const newRow = gameBoard[rowIndex];\n\n    newRow.reverse();\n\n    gameBoard[rowIndex] = move(newRow).reverse();\n  }\n\n  appendTile();\n  score += moveScore;\n\n  updateScore();\n  renderBoard();\n};\n\nfunction moveUp() {\n  isWinner();\n  isLoser();\n  moveScore = 0;\n\n  for (let columnIndex = 0; columnIndex < 4; columnIndex++) {\n    let newColumn = [\n      gameBoard[0][columnIndex],\n      gameBoard[1][columnIndex],\n      gameBoard[2][columnIndex],\n      gameBoard[3][columnIndex],\n    ];\n\n    newColumn = move(newColumn);\n\n    gameBoard[0][columnIndex] = newColumn[0];\n    gameBoard[1][columnIndex] = newColumn[1];\n    gameBoard[2][columnIndex] = newColumn[2];\n    gameBoard[3][columnIndex] = newColumn[3];\n  }\n\n  appendTile();\n  score += moveScore;\n\n  updateScore();\n  renderBoard();\n};\n\nfunction moveDown() {\n  isWinner();\n  isLoser();\n  moveScore = 0;\n\n  for (let columnIndex = 0; columnIndex < 4; columnIndex++) {\n    let newColumn = [\n      gameBoard[3][columnIndex],\n      gameBoard[2][columnIndex],\n      gameBoard[1][columnIndex],\n      gameBoard[0][columnIndex],\n    ];\n\n    newColumn = move(newColumn);\n\n    gameBoard[3][columnIndex] = newColumn[0];\n    gameBoard[2][columnIndex] = newColumn[1];\n    gameBoard[1][columnIndex] = newColumn[2];\n    gameBoard[0][columnIndex] = newColumn[3];\n  }\n\n  appendTile();\n  score += moveScore;\n\n  updateScore();\n  renderBoard();\n};\n\nfunction keyHandler(keyEvent) {\n  switch (keyEvent.code) {\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n  }\n};\n"]}